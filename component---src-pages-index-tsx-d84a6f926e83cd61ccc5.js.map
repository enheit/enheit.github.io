{"version":3,"sources":["webpack:///./src/components/article-thumbnail/article-thumbnail.styles.ts","webpack:///./src/components/article-thumbnail/article-thumbnail.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/article-info/article-info.styles.ts","webpack:///./src/components/article-info/article-info.tsx"],"names":["$Thumbnail","styled","section","typography","rhythm","$Title","h1","scale","fontSize","$Spoiler","p","ArticleThumbnail","props","to","slug","title","date","timeToRead","spoiler","IndexPage","postCount","useMemo","data","allMarkdownRemark","edges","length","map","item","node","fields","key","id","frontmatter","$Info","small","ArticleInfo"],"mappings":"qLAGaA,EAAaC,UAAOC,QAAV,wFAAGD,CAAH,uBACJE,IAAWC,OAAO,IAGxBC,EAASJ,UAAOK,GAAV,oFAAGL,CAAH,kEACJE,IAAWI,MAAM,GAAGC,UAQtBC,EAAWR,UAAOS,EAAV,sFAAGT,CAAH,eCVRU,EAA8C,SAAAC,GACzD,OACE,kBAACZ,EAAD,KACE,kBAAC,IAAD,CAAOa,GAAID,EAAME,MACf,kBAACT,EAAD,KAASO,EAAMG,QAGjB,kBAAC,IAAD,CAAaC,KAAMJ,EAAMI,KAAMC,WAAYL,EAAMK,aAEjD,kBAACR,EAAD,KAAWG,EAAMM,W,YC8DRC,UAjDqC,SAAAP,GAElD,IAAMQ,EAAYC,mBAAQ,kBAAMT,EAAMU,KAAKC,kBAAkBC,MAAMC,SAAQb,EAAMU,KAAKC,kBAAkBC,OAexG,OACE,kBAAC,IAAD,KACGJ,EAAY,EACTR,EAAMU,KAAKC,kBAAkBC,MAAME,KAhBxB,SAACC,GAClB,OACE,kBAAC,EAAD,CACEb,KAAMa,EAAKC,KAAKC,OAAOf,KACvBgB,IAAKH,EAAKC,KAAKG,GACff,KAAMW,EAAKC,KAAKI,YAAYhB,KAC5BD,MAAOY,EAAKC,KAAKI,YAAYjB,MAC7BG,QAASS,EAAKC,KAAKI,YAAYd,QAC/BD,WAAYU,EAAKC,KAAKX,gBASpB,yD,6FC/CGgB,E,UAAQhC,QAAOiC,MAAV,+EAAGjC,CAAH,MCELkC,EAAoC,SAAAvB,GAC/C,OACE,kBAACqB,EAAD,KAAQrB,EAAMI,KAAd,MAAuBJ,EAAMK,WAA7B,e","file":"component---src-pages-index-tsx-d84a6f926e83cd61ccc5.js","sourcesContent":["import styled from 'styled-components';\nimport typography from '../../utils/typography';\n\nexport const $Thumbnail = styled.section`\n  margin-bottom: ${typography.rhythm(2)};\n`;\n\nexport const $Title = styled.h1`\n  font-size: ${typography.scale(1).fontSize};\n  margin: 0;\n  font-family: \"Biryani\";\n  font-weight: 900;\n`\n\n\n\nexport const $Spoiler = styled.p`\n  margin: 0;\n`","import React, { FC } from 'react';\nimport { $Link } from '../../styles/Link';\nimport { ArticleInfo } from '../article-info/article-info';\nimport { $Spoiler, $Thumbnail, $Title } from './article-thumbnail.styles';\nimport { ArticleThumbnailProps } from './article-thumbnail.types';\n\nexport const ArticleThumbnail: FC<ArticleThumbnailProps> = props => {\n  return (\n    <$Thumbnail>\n      <$Link to={props.slug}>\n        <$Title>{props.title}</$Title>\n      </$Link>\n\n      <ArticleInfo date={props.date} timeToRead={props.timeToRead} />\n      \n      <$Spoiler>{props.spoiler}</$Spoiler>\n    </$Thumbnail>\n  )\n}","import \"@fontsource/biryani/900.css\"\nimport { graphql, PageProps } from 'gatsby'\nimport React, { FC, useMemo } from \"react\"\nimport { ArticleThumbnail } from '../components/article-thumbnail/article-thumbnail'\nimport { Layout } from '../components/layout/layout'\n\ninterface IndexPageQueryDatum {\n  node: {\n    id: string\n    frontmatter: {\n      date: string\n      title: string\n      spoiler: string\n    }\n    fields: {\n      slug: string\n    }\n    html: string\n    timeToRead: number\n  }\n}\n\ninterface IndexPageDataType {\n  allMarkdownRemark: {\n    edges: IndexPageQueryDatum[]\n  }\n}\n\nconst IndexPage: FC<PageProps<IndexPageDataType>> = props => {\n\n  const postCount = useMemo(() => props.data.allMarkdownRemark.edges.length, props.data.allMarkdownRemark.edges)\n\n  const renderItem = (item: IndexPageQueryDatum) => {\n    return (\n      <ArticleThumbnail\n        slug={item.node.fields.slug}\n        key={item.node.id}\n        date={item.node.frontmatter.date}\n        title={item.node.frontmatter.title}\n        spoiler={item.node.frontmatter.spoiler}\n        timeToRead={item.node.timeToRead}\n      />\n    )\n  }\n\n  return (\n    <Layout>      \n      {postCount > 0 \n        ? props.data.allMarkdownRemark.edges.map(renderItem)\n        : <p>There are no blog posts</p>\n      }\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"d MMM, YYYY\")\n            title\n            spoiler\n          }\n          fields {\n            slug\n          }\n          timeToRead\n          html\n          id\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import styled from 'styled-components';\n\nexport const $Info = styled.small`\n\n`","import React, { FC } from 'react';\nimport { $Info } from './article-info.styles';\nimport { ArticleInfoProps } from './article-info.types';\n\nexport const ArticleInfo: FC<ArticleInfoProps> = props => {\n  return (\n    <$Info>{props.date} / {props.timeToRead} min read</$Info>\n  )\n}\n"],"sourceRoot":""}